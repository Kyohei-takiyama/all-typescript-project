name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  ECR_REPO_NAME: ts-pj-ecr-repo
  ECS_CLUSTER_NAME: ts-pj-ecs-cluster
  ECS_SERVICE_NAME: ts-pj-ecs-service
  ECS_TASK_DEFINITION_FAMILY: .aws/task-definition.json
  CONTAINER_NAME: ts-pj-ecs-container
  APPSPEC_FILE: .aws/appspec.yml
  CODEDEPLOY_APP_NAME: ts-pj-codedeploy-app
  CODEDEPLOY_DEPLOYMENT_GROUP: ts-pj-codedeploy-deployment-group

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      task-definition: ${{ steps.task-definition.outputs.task-definition }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Print Variables with Working Directory
        run: |
          echo "{{ toJSON(github) }}"
          echo "GITHUB_SHA=${GITHUB_SHA}"
          pwd
          ls -la

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Check Node.js version
        run: node --version

        # tag: GITHUB_REF##*/=v1.0.0
      - name: Create tag
        id: create-tag
        run: |
          if [[ "${GITHUB_REF##*/}" == v* ]]; then
            echo "tag=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          else
            echo "tag=$(date +v%Y%m%d)-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

        # docker/build-push-action@v5の処理でbuildxに依存しているため、前段でこのactionsを実行
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ここでのcontextはCheckoutされたトップディレクトリを参照しているため、Dockerfileがあるディレクトリを指定
      - name: Build and push image
        uses: docker/build-push-action@v5
        id: build-image
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ steps.create-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          platforms: linux/amd64,linux/arm64

      - name: Create ECS task definition
        id: task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_FAMILY }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ steps.create-tag.outputs.tag }}

      - name: deploy to ecs
        id: deploy-to-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # inputs: https://github.com/aws-actions/amazon-ecs-deploy-task-definition/blob/master/action.yml
          task-definition: ${{ steps.task-definition.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          service: ${{ env.ECS_SERVICE_NAME }}
          codedeploy-appspec: ${{ env.APPSPEC_FILE }}
          codedeploy-application: ${{ env.CODEDEPLOY_APP_NAME }}
          codedeploy-deployment-group: ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }}
