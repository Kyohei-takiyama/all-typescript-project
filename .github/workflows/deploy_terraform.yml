name: "terraform"

on:
  push:
    branches:
      - main
      - develop
    paths:
      - "terraform/envs/dev/**"
      - "modules/**"
      - "!README.md"
      - "!.gitignore"
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/deploy_terraform.yml"
      - "terraform/envs/dev/**"
      - "terraform/modules/**"
      - "!README.md"
      - "!.gitignore"
env:
  TF_VERSION: "1.7.0"
  TF_WORK_DIR: "terraform/envs/dev"
  TF_AWS_REGION: "us-west-2"

permissions:
  id-token: write
  contents: read
  actions: read
  pull-requests: write

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORK_DIR }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: "Configure AWS Credentials (AssumeRole via OIDC Provider)"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.TF_AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform fmt
        id: fmt
        if: github.event_name == 'pull_request'
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        if: github.event_name == 'pull_request'
        run: terraform validate

      # ${GITHUB_WORKSPACE}:‰ΩúÊ•≠„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÁµ∂ÂØæ„Éë„Çπ„ÅßÂèñÂæó„Åô„ÇãÊñπÊ≥ï
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -out plan.tmp
          terraform show plan.tmp > ${GITHUB_WORKSPACE}/plan.out
        continue-on-error: true

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">Actions</a>.'
            const fs = require('fs')
            const tf_plan = fs.readFileSync('plan.out', 'utf8')
            const tf_plan_formatted = tf_plan.length > 65000 ? tf_plan.substring(0, 65000) + '...' : tf_plan
            const truncated_message = tf_plan.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${tf_plan_formatted}
            \`\`\`

            </details>
            ${truncated_message}

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORK_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
        run: terraform apply -auto-approve
